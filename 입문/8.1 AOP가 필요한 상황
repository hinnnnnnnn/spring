💡 AOP가 필요한 상황
• 모든 메소드의 호출 시간을 측정하고 싶다면?
• 공통 관심 사항(cross-cutting concern) vs 핵심 관심 사항(core concern)
• 회원 가입 시간, 회원 조회 시간을 측정하고 싶다면?

⚙️ 스프링 컨테이너
memberController(시간 측정 로직) -> memberService(시간 측정 로직) -> memverRepository(시간 측정 로직)

⛓️‍💥hello.hello_spring - service - MemberService
📌MemberService 수정

    //✅ 회원가입
    public Long join(Member member) {

        long start = System.currentTimeMillis();
        try { //⭐️핵심로직
            validateDuplicateMember(member); //같은 이름이 있는 중복 회원X
            memberRepository.save(member);
            return member.getId();
        } finally {
            long finish = System.currentTimeMillis();
            long timeMs = finish - start;
            System.out.println("join = " + timeMs + "ms"); //🔎출력 결과: join = 12ms
        }
    }

    //✅ 전체 회원 조회
    public List<Member> findMembers(){
    
        long start = System.currentTimeMillis();
        try { //⭐️핵심로직
            return memberRepository.findAll();
        } finally {
            long finish = System.currentTimeMillis();
            long timeMs = finish - start;
            System.out.println("findMembers " + timeMs + "ms"); //🔎출력 결과: findMembers = 78ms
        }
    }



🚨 문제
• 회원가입, 회원 조회에 시간을 측정하는 기능은 핵심 관심 사항이 아님
• 시간을 측정하는 로직은 공통 관심 사항
• 시간을 측정하는 로직과 핵심 비즈니스의 로직이 섞여서 유지보수가 어려움
• 시간을 측정하는 로직을 별도의 공통 로직으로 만들기 매우 어려운
• 시간을 측정하는 로직을 변경할 때 모든 로직을 찾아가면서 변경해야 함
