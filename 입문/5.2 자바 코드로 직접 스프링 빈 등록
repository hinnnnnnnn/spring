🔎 스프링 빈을 등록하는 2가지 방법
1. 컴포넌트 스캔과 자동 의존관계 설정 
2. 자바 코드로 직접 스프링 빈 등록 (지금 사용한 방법)

MemberService 와 MemberRepository의 @Service, @Repository, @Autowired 애노테이션 제거 후 진행

⛓️‍💥 hello.hello_spring - SpringConfig
📌 SpringConfig.java

package hello.hello_spring;

import hello.hello_spring.repository.MemberRepository;
import hello.hello_spring.repository.MemoryMemberRepository;
import hello.hello_spring.service.MemberService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration //✅ 내부에 정의된 메서드들이 반환하는 객체들을 스프링 빈으로 등록 / 즉, 여기서 만든 객체들은 스프링이 직접 관리 (@Component 대신 수동 등록 방식)
public class SpringConfig {

    @Bean
    public MemberService memberService() {
        return new MemberService(memberRepository());
    }

    /*
    ✅ @Bean
        이 메서드가 리턴하는 객체를 스프링 빈으로 등록
        즉, MemberService 객체를 하나 만들어서 스프링 컨테이너에 등록하고, 나중에 필요한 곳에 자동으로 주입할 수 있도록 해줌
    📌 설명:
        MemberService 는 회원 가입, 조회 등 비즈니스 로직을 처리하는 클래스
        이 서비스는 내부적으로 MemberRepository가 필요하므로,
        memberRepository() 메서드를 호출해서 의존성을 넣어줌 (👉 의존성 주입)
    */

    @Bean
    public MemberRepository memberRepository() {
        return new MemoryMemberRepository();

    /*
    📌 설명:
      MemberRepository는 회원 데이터를 저장하고 불러오는 인터페이스
      MemoryMemberRepository는 그 구현체로, 데이터를 메모리에 저장하는 방식
      메모리에 저장하는 리포지토리 객체를 생성해서 스프링 빈으로 등록하는 코드
    */
    
    }
}


🔁 이 코드의 핵심 흐름 요약
1. @Configuration으로 설정 클래스 지정
2. @Bean으로 MemberService와 MemberRepository를 스프링 빈으로 등록
3. MemberService는 MemberRepository를 의존하므로, 생성자에 주입
4. 스프링이 애플리케이션 실행 시 이 설정대로 객체를 만들고 관리함
5. 덕분에 다른 클래스에서 @Autowired 등으로 필요한 객체를 쉽게 받아올 수 있음 (DI)

🔎 참고
DI에는 필드 주입, setter 주입, 생성사 주입 3가지 방법 존재, 의존관계가 실행중에 동적으로 변하는 경우 거의 없으므로 생성자 주입 권장
실무에서는 주로 정형화된 컨트롤러, 서비스, 리포지토리 같은 코드는 컴포넌트 스캔을 사용,정형화 되지 않거나 상황에 따라 구현 클래스를 변경해야 하면 설정을 통해 스프링 빈 등록

🚨 주의
@Autowired를 통한 DI는 helloController, MemberService와 같이 스프링이 관리하는 객체에서만 동작
스프링 빈으로 등록하지 않고 직접 생성한 객체에서는 동작하지 않음
