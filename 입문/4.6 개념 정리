1. 애플리케이션 개발 시 비지니스 핵심 로직을 주로 담당하는 것은?
   서비스
   ** 서비스 계층은 애플리케이션의 핵심 비지니스 규칙을 구현함, 사용자의 요청을 처리하기 위해 리포지토리 등을 활용
      컨트롤러는 요청 받고, 리포지토리는 데이터 접근을 담당
      
2. 데이터 저장 방식이 아직 결정되지 않은 상황에서, 리포지토리 구현체의 변경에 유연하게 대처하기 위한 설계 방식은?
   리포지토리 인터페이스를 정의하고, 임시 구현체 (메모리) 사용
   
3. JUnit 테스트 케이스 작성 시, 여러 테스트 메서드가 실행될 때 각 테스트가 서로 독립적으로 동작하게 만들기 위한 방법은?
   테스트 실행 후 공유 데이터를 정리(clear)하는 코드를 추가
   
4. 서비스 계층과 리포지토리 계층의 역할 및 이름 부여 방식에 대한 설명 중 적절하지 않은 것은?
   서비스 계층이 복잡한 데이터ㅁ 입출력 로직을 주로 담당 (X)
   ** 리포지토리는 데이터 접근에 집중하며 서비스 계층은 리포지토리를 활용하여 비지니스 로직을 수행함, 복잡한 비지니스 로직은 서비스 계층의 역할
   
5. 서비스 객체가 자신이 의존하는 리포지토리 객체의 구현체를 직접 생성하지 않고, 외부에서 전달받아 사용하는 설계 방식은?
   의존성 주입
   ** 객체가 필요한 다른 객체를 직접 생성하지 않고 외부에서 받아 사용하는 방식, 코드의 재사용성을 높이고 테스트하기 쉽게 만들어줌
