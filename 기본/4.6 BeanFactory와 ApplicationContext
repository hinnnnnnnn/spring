<<interface>>BeanFactory <--- <<interface>>ApplicaiotnContext <--- AnnotationConfig ApplicationContext

📌"BeanFactory"
• 스프링 컨테이너의 최상위 인터페이스
• 스프링 빈을 관리하고 조회하는 역할을 담당
• 'getBean()을 제공'
• 대부분의 기능은 BeanFactory가 제공


📌"ApplicationContext"
• BeanFactory 기능을 모두 상속받아 제공
• 빈을 관리하고 검색하는 기능을 BeanFactory가 제공해주는데 둘의 차이는?
• 애플리케이션을 개발할 때는 빈은 관리하고 조회하는 기능은 물론, 수 많은 부가기능 필요
• 부가기능
  1️⃣"메세지소스를 활용한 국제화 기능"
     예) 한국에서 들어오면 한국어로, 영어권에서 들어오면 영어로 출력
  2️⃣"환경변수"
     로컬, 개발, 운영을 구분해서 처리
  3️⃣"애플리케이션 이벤트"
     이벤트를 발생하고 구독하는 모델을 편리하게 지원
  4️⃣"편리한 리소스 조회"
     파일, 클래스패스, 외부 등에서 리소스를 편리하게 조회


⭐️ 정리 ⭐️
• ApplicaiotnContext는 BeanFactory의 기능을 상속 받음
• ApplicaiotnContext는 빈 관리기능 + 편리한 부가 기능을 제공함
• BeanFactory를 직접 사용할 일은 거의 없음, 부가기능이 포함된 ApplicaiotnContext를 사용함
• BeanFactory나 ApplicaiotnContext를 스프링 컨테이너라고 함
