ApplicationContext applicationContext = new AnnotationCofigApplicationContext(AppConfig.class);

• 'ApplicationContext'를 스프링 컨테이너라고 함
• 'ApplicationContext'는 인터페이스
• 스프링 컨테이너는 XML을 기반으로 만들 수 있고, 애노테이션 기반의 자바 설정 클래스로 만들 수 있음
• 직전에 'AppCofig'를 사용했던 방식이 애노테이션 기반의 자바 설정 클래스로 스프링 컨테이너를 만든 것
• 자바 설정 클래스를 기반으로 스프링 컨테이너('ApplicationContext')를 만들어보자
  • new AnnotationCofigApplicationContext(AppConfig.class);
  • 이 클래스는 'ApplicationContext' 인터페이스의 구현체

🔎 스프링 컨테이너의 생성 과정
1️⃣ 1. 스프링 컨테이너 생성 (AppConfig.class) -> 스프링 컨테이너(스프링 빈 저장소) -> 2. 구성 정보 활용 -> AppConfig.class
2️⃣ 스프링 빈 등록 (memberService, OrderService, memberRepository, discountPolicy)
   스프링 컨테이너는 파라미터로 넘어온 설정 클래스 정보를 사용해서 스프링 빈을 등록함
    * 빈 이름 : 메서드 이름 사용, 직접 부여도 가능 (@Bean(name = "")), 항상 다른 이름 부여 (중복 불가)
3️⃣ 스프링 빈 의존관계 설정 - 준비
4️⃣ 스프링 빈 의존관계 설정 - 완료 
   memberService -> memberRepository -> orderService -> discountPolicy
   스프링 컨테이너는 설정 정보를 참고해서 의존관계를 주입함

⭐️ 정리
스프링 컨테이너를 생성하고, 설정 정보를 참고해서 스프링 빈을 등록하고, 의존관계도 설정
