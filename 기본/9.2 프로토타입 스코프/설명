싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링 빈을 반환함
반면에 프로토타입 스코프를 스프링 컨테이너에 조회하면 컨테이너는 항상 새로운 인스턴스를 생성해서 반환함

🔎 싱글톤 빈 요청
1. 싱글톤 스코프의 빈을 스프링 컨테이너에 요청함
2. 스프링 컨테이너는 본인이 관리하는 스프링 빈을 반환함
3. 이후에 스프링 컨테이너에 같은 요청이 와도 같은 객체 인스턴스의 스프링 빈을 반환함

🔎 프로토타입 빈 요청1
1. 프로토타입 스코프의 빈을 스프링 컨테이너에 요청함
2. 스프링 컨테이너는 이 시점에 프로토타입 빈을 생성하고, 필요한 의존관계를 주입함

🔎 프로토타입 빈 요청2
3. 스프링 컨테이너는 생성한 프로토타입 빈을 클라이언트에 반환함
4. 이후에 스프링 컨테이너에 같은 요청이 오면 항상 새로운 프로토타입 빈을 생성해서 반환함

💡 정리
   핵심은 스프링 컨테이너는 프로토타입 빈을 생성하고, 의존관계 주입, 초기화까지만 처리함
   클라이언트에 빈을 반환하고, 이후 스프링 컨테이너는 생성된 프로토타입 빈을 관리하지 않은
   프로토타입 빈을 관리할 책임은 프로토타입 빈을 받은 클라이언트에 있음
   @PreDestory 같은 종료 메서드가 호출되지 않음


✅ 실행 결과
   싱글톤 빈은 스프링 컨테이너 생성 시점에 초기화 메서드가 실행되지만, 프로토타입 스코프의 빈은 스프링 컨테이너에서 빈을 조회할 떄 생성되고, 초기화 메서드도 실행됨
   프로토타입 빈을 2번 조회했으므로 완전히 다른 스프링 빈이 생성되고, 초기화도 2번 실행된것을 확인할 수 있음
   싱글톤 빈은 스프링 컨테이너가 관리하기 때문에 스프링 컨테이너가 종료될 때 빈의 종료 메서드가 실행되지만, 
   프로토타입 빈은 스프링 컨테이너가 생성과 의존관계 주입 그리고 초기화 까지만 관여하지만 더는 관리하지 않음
   따라서 프로토타입 빈은 스프링 컨테이너가 종료될떄 @PreDestory 같은 종료 메서드가 전혀 실행되지 않음


⭐️ 프로토타입 빈의 특징 정리
   스프링 컨테이너에 요청할 때 마다 새로 생성됨
   스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입 그리고 초기화까지만 관여함
   종료 메서드가 호출되지 않음
   그래서 프로토타입 빈은 프로토타입 빈을 조회한 클라이언트가 관리해야 함, 종료 메서드에 대한 호출도 클라이언트가 직접 해야함













