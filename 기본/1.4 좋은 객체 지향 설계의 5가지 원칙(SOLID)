⭐️ SOLID
  클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
  SRP : 단일 책임 원칙
  OCP : 개발-폐쇄 원칙
  LSP : 리스코프 치환 원칙
  ISP : 인터페이스 분리 원칙
  DIP : 의존관계 역전 원칙

1️⃣ SRP 단일 책임 원칙
  Single responsibility principle
• 한 클래스는 하나의 책임만 가져야 함 (하나의 책임이라는 것은 모호)
• 중요한 기준은 변경, 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것
ex) UI 변경, 객체의 생성과 사용을 분리

2️⃣ OCP 개방-폐쇄 원칙
  Open/closed principle
• 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 함
• 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현
• 기능을 추가할 수 있어야 한다 → 열려 있다 (Open) / 기존 코드는 수정하지 않아야 한다 → 닫혀 있다 (Closed)
ex) 게임 캐릭터가 장비를 추가 장착할 수는 있지만, 이미 입고 있는 갑옷을 갈아엎지는 않아야 한다
🚨 문제점
MemberService 클라이언트가 구현 클래스를 직접 선택
MemberRepository m = new MemoryMemberRepository(); //기존 코드
MemberRepository m = new JdbcMemberRepository(); //변경코드
구현 객체를 변경하려면 클라이언트를 코드를 변경해야 함
분명 다형성을 사용했지만 OCP 원칙을 지킬 수 없음
✅ 해결 방법
객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요함

3️⃣ LSP 리스코프 치환 원칙
  Liskov substitution principle
• 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 함
• 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙 필요
• 단순히 컴파일에 성공하는 것을 넘어서는 이야기
ex) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반, 느리더라도 앞으로 가야함

4️⃣ ISP 인터페이스 분리 원칙
  Interface segregation principle
• 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
• 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
• 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
• 분리하면 정리 인터페이스 자체가 변해도 운전자 클라이언트에 영향 주지 않음
• 인터페이스가 명확해지고, 대체 가능성이 높아짐

5️⃣ DIP 의존관계 역전 원칙
  Dependency inversion principle
• 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다." 의존성 주입은 이 원칙을 따르는 방법 중 하나
• 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻
• 역할에 의존하게 해야하다는 것과 같은 의미 
• 객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체 변경 가능
• 구현체에 의존하게 되면 변경이 아주 어려워짐
• OCP에서 설명한 MemberService는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존함
• MemberService 클라이언트가 구현 클래스를 직접 선택
  MemberRepository m = new MemoryMemberRepository();
• DIP 위반

⭐️ 정리
• 객체 지향의 핵심의 다형성
• 다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없음
• 다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경됨
• 다형성 만으로는 OCP, DIP를 지킬 수 없음
뭔가 더 필요 ..































