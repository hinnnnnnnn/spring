🛠️ 객체 지향 프로그래밍
컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다.
각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다.
객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.

🔎 다형성
1️⃣ 다형성의 실세계 비유
  실세계와 객체 지향을 비유할 수는 없지만 이해를 위해 ..
  • 역할과 구현으로 세상을 구분
  📌 운전자 - 자동차
     운전자 역할 ---> 자동차 역할 <--- 자동차 구현(K3, 아반떼, 테슬라 모델3)
  • 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다.
  • 장점 : 클라이언트는 대상의 역할(인터페이스)만 알면 됨
          클라이언트는 구현 대상의 내부 구조를 몰라도 됨
          클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않음
          클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않음
2️⃣ 자바 언어
  • 자바 언어의 다형성을 활용
  • 역할 = 인터페이스 / 구현 = 인터페이스를 구현한 클래스, 구현 객체
  • 객체를 설계할 때 역할과 구현을 명확히 분리
  • 객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
3️⃣ 자바 언어의 다형성
  • 오버라이딩 된 메서드가 실행
  •  다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경할 수 있음
4️⃣ 다형성의 본질
  • 인터페이스를 구현한 객체 인스턴스를 실행 시점에서 유연하게 변경 가능
  • 다형성의 본질을 이해하려면 협력이라는 객체 사이의 관게에서 시작해야함
  • 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경 가능
5️⃣ 정리
  • 유연하고, 변경이 용이
  • 확장 가능한 설계
  • 클라이언트에 영향을 주지 않는 변경 가능
  • 인터페이스를 안정적으로 잘 설계하는 것이 중요
6️⃣ 한계
  • 역할(인터페이스) 자체가 변하면, 클라이언트, 서버 보두 큰 변경이 발생
  • ex) 자동차를 비행기로 변경해야 한다면?
  • 인터페이스를 안정적으로 잘 설계하는 것이 중요
  
⭐️ 스프링과 객체 지향
   • 다형성이 가장 중요
   • 스프링은 다형성을 극대화해서 이용할 수 있게 도와줌
   • 스프링에서 이야기하는 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원
   • 스프링을 사용하면 마치 레고 블럭 조립하듯이 구현을 편리하게 변경 가능
