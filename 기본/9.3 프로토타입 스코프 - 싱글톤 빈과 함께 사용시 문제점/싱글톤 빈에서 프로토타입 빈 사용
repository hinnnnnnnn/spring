🔎 싱글톤에서 프로토타입 빈 사용1
clientBean은 싱글톤이므로, 보통 스프링 컨테이너 생성 시점에 함께 생성되고, 의존관계 주입도 발생함
1. clientBean은 의존관계 자동 주입을 사용함, 주입 시점에 스프링 컨테이너에 프로토타입 빈을 요청함
2. 스프링 컨테이너는 프로토타입 빈을 생서해서 clientBean에 반환함, 프로토타입 빈의 count 필드 값은 0임
이제 clientBean은 프로토타입 빈을 내부 필드에 보관함 (정확히는 참조값을 보관함)

🔎 싱글톤에서 프로토타입 빈 사용2
클라이언트A는 clientBean을 스프링 컨테이너에 요청해서 받음, 싱글톤이므로 항상 같은 clientBean이 반환됨
3. 클라이언트A는 clientBean.logic()을 호출함
4. clientBean은 prototypeBean의 addCount()를 호출해서 프로토타입 빈의 count를 증가함, count값이 1이됨

🔎 싱글톤에서 프로토타입 빈 사용3
클라이언트B는 clientBean을 스프링 컨테이너에 요청해서 받음, 싱글톤이므로 항상 같은 clientBean이 반환됨
여기서 중요한 점은 clientBean 내부에 가지고 있는 프로토타입 빈은 이미 과거에 주입이 끝난 빈,
주입 시점에 스프링 컨테이너에 요청해서 프로토타입 빈이 새로 생성이 된 것이지, 사용할 때마다 새로 생성되는 것이 아님
5. 클라이언트 B는 clientBean.logic()을 호출함
6. clientBean은 prototypeBean의 addCount()를 호출해서 프로토타입 빈의 count를 증가함, count값이 2이됨

📌 상황 설명: 싱글톤 빈이 프로토타입 빈을 필드로 가질 때
clientBean(싱글톤)은 처음 만들어질 때 한 번만 의존성 주입을 받음.
이때 prototypeBean도 같이 주입되는데, 이건 딱 한 번 생성된 객체임.
그 이후로는 clientBean이 가지고 있는 같은 프로토타입 객체를 계속 씀.

🎯 그 결과는?
A가 logic() 호출 → prototypeBean count 0 → 1
B가 logic() 호출 → 같은 객체 사용 → count 1 → 2
👉 프로토타입인데도 새 객체가 안 만들어지고 계속 같은 객체를 씀
왜? 싱글톤은 생성 시점에 주입만 받고, 이후에는 같은 객체를 계속 사용하니까!



