생성자 부분을 보면 url 정보 없이 connect가 호출되는 것을 확인 가능
객체를 생성하 다음에 외부에서 수정자 주입을 통해서 setUrl()이 호출되어야 url이 존재하게 됨

🔎스프링 빈은 간단한 라이프사이클을 가짐
객체 생성 -> 의존관계 주입

스프링 빈은 객체를 생성하고, 의존관계 주입이 다 끝난 다음에야 필요한 데이터를 사용할 수 있는 준비가 완료됨
스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한 기능을 제공함
또한 스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 줌

🔎스프링 빈의 이벤트 라이프 사이클
스프링 컨테이너 생성 -> 스프링 빈 생성 -> 의존관계 주입 -> 초기화 콜백 -> 사용 -> 소멸전 콜백 -> 스프링 종료
* 초기화 콜백 : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출
* 소멸전 콜백 : 빈이 소멸되기 직전에 호출

💡스프링은 크게 3가지 방법으로 빈 생명주기 콜백을 지원함
1. 인터페이스 
2. 설정 정보에 초기화 메서드, 종료 메서드 지정
3. @PostConstruct, @PreDestory 애노테이션 지원

🧠 스프링 빈 생명주기란?
스프링이 객체를 만들고 사용하는 순서야!
마치 햄버거 가게에서 버거 하나 만들어서, 먹고, 다 치우는 과정이랑 비슷해.

🍔 햄버거(스프링 빈) 만드는 순서
햄버거 빵 꺼내기 → 객체 생성

고기, 야채 넣기 → 필요한 재료 넣기 ( = 의존관계 주입)

포장하거나 준비 마무리 → 다 준비된 후 마지막 점검 ( = 초기화 콜백)

손님이 먹음 → 실제 사용

쓰레기통에 버리기 전에 정리 → 치우기 전 작업 ( = 소멸 콜백)

📌 스프링도 똑같음
1   빵 꺼냄   객체 생성 (new)
2   재료 넣음   의존관계 주입 (setUrl 같은 거)
3   포장, 확인   초기화 콜백 (@PostConstruct 등)
4   먹음   사용 (로직 실행)
5   정리, 버림   소멸 콜백 (@PreDestroy 등)

✨ 핵심만 딱 정리!
스프링은 객체를 만들고 → 필요한 거 넣고 → 사용하고 → 정이걸 "생명주기"라고 해
중간중간 자동으로 불리는 함수(=콜백)를 설정할 수 있어
준비 완료: @PostConstruct
정리할 때: @PreDestroy
