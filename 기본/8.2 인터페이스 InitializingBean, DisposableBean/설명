🔧 쉽게 말하면...
"스프링이 이 객체를 만들고 쓸 준비를 다 끝내면 → 네트워크에 연결해!"
"앱이 종료되기 직전엔 → 연결 끊어!"
이렇게 초기화와 종료 시점에 해야 할 일을 스프링에게 맡겨놓은 코드

출력 결과를 보면 초기화 메서드가 주입 완료 후에 적절하게 호출 된 것을 확인 가능함
스프링 컨테이너의 종료가 호출되자 소멸 메서드가 호출 된 것도 확인 가능함


🔎"초기화, 소멸 인터페이스 단점"
• 이 인터페이스는 스프링 전용 인터페이스임, 해당 코드가 스프링 전용 인터페이스에 의존함
• 초기화, 소멸 메서드의 이름을 변경할 수 없음
• 코드를 고칠 수 없는 외부 라이브러리에 적용할 수 없음

1️⃣ 생성자
✅ public class NetworkClient implements InitializingBean, DisposableBean
   • Spring이 제공하는 생명주기 콜백 인터페이스
     • InitializingBean: afterPropertiesSet() → 초기화 직후 실행
     • DisposableBean: destroy() → 빈 종료 직전 실행

2️⃣ setter
✅ public void setUrl(String url) {
    this.url = url;
    }
   • 외부에서 의존성 주입 받을 수 있도록 URL 설정

3️⃣ 기능 메서드
✅ public void connect() { ... }
   public void call(String message) { ... }
   public void disconnect() { ... }
  • connect(): 연결 작업 시 호출
  • call(): 네트워크 요청 전송
  • disconnect(): 연결 종료

4️⃣ 초기화 콜백 (afterPropertiesSet)
✅ @Override
     public void afterPropertiesSet() throws Exception {
      connect();
      call("초기화 연결 메시지");
   }
  • 빈 등록 후, setUrl() 까지 완료된 뒤 호출됨
  • 즉, URL이 주입된 이후 네트워크 연결 작업을 시작

5️⃣ 소멸 콜백 (destroy)
✅ @Override
    public void destroy() throws Exception {
        disconnect();
    }
  • 빈 소멸 직전에 호출
  • 네트워크 연결 종료(clean-up 작업)

