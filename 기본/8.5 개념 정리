1️⃣ 스프링 빈 생명주기에서 객체 생성과 초기화 단계를 분리하는 주된 이유는?
   의존성 주입 완료 시점 문제 해결
   빈 생성 후 의존성 주입이 이뤄지므로, 주입된 값을 사용하는 초기화는 그 이후에 필요함, 생성자는 주입 전 호출됨

2️⃣ InitializingBean 인터페이스의 afterPropertiesSet() 메서드는 빈 생명주기 중 언제 호출되는지?


3️⃣ InitializingBean, DisposableBean 인터페이스를 사용한 빈 생명주기 콜백 방식의 단점은?
   스프링 전용 인터페이스에 의존해야 함
   InitializingBean, DisposableBean은 스프링 프레임워크에 특화된 인터페이스라 빈 코드가 스프링에 종속된다는 단점 존재, 메서드 이름도 고정

4️⃣ @PostConStruct, @PreDestory 어노테이션 방식이 권장되는 주된 이유는?


5️⃣ 코드를 직접 수정할 수 없는 외부 라이브러리 객체 초기화/소멸에 적합한 스프링 빈 설정 방식은?
   Bean 등록 시 initMethod/destoryMethod 지정
   외부 라이브러리는 코드를 수정해 인터페이스를 구현하거나 애노테이션을 붙일 수 없음
   @Bean 등록 시 설정으로 초기화/소멸 메서드를 지정하는 방식을 사용함
