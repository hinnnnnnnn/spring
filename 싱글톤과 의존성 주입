🔁 싱글톤(Singleton) 패턴
📌 정의
애플리케이션에서 클래스의 인스턴스를 오직 하나만 생성해서 여러 곳에서 공유해서 사용하는 디자인 패턴

📌 예시
MemberService가 싱글톤이라면
MemberController, OrderController 등에서 같은 인스턴스를 사용함
상태를 공유하거나, 공통 기능을 처리할 때 일관성 유지 가능

📌 Spring과 싱글톤
Spring은 기본적으로 모든 Bean을 싱글톤으로 관리
즉, @Service, @Component, @Repository 등으로 등록된 Bean들은 하나만 생성되어 스프링 컨테이너에 보관
필요한 곳에 의존성 주입(DI) 방식으로 제공함

🛠️ 예시:
학교에 프린터가 하나 있음
이 프린터는 학생들이 다 같이 사용
→ 한 명이 쓰고 나면, 다른 사람이 또 다른 하나 사용

🔁 의존성 주입(Dependency Injection)
📌 정의
어떤 객체가 필요한 객체(의존성) 를 직접 만들지 않고,외부(보통 프레임워크) 에게 주입받는 방식

📌 설명
클래스가 다른 클래스의 기능이 필요할 때 보통 new로 직접 생성
그러나 이렇게 하면 객체들 사이의 결합도(coupling) 가 높아져 유지보수가 어려워짐
DI는 필요한 객체를 외부에서 만들어서 넣어주는 방식이라,결합도를 낮추고 테스트가 쉬워지고 코드 재사용성이 높아짐

🛠️ 예시:
너가 카페에서 일해. 손님이 커피 달라고 해.
근데 커피머신이 필요해!
근데 너가 직접 커피머신을 사오진 않아.
사장님(스프링) 이 커피머신을 미리 준비해주고,
네가 쓸 수 있게 갖다줘요.
